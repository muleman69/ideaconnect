// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkId     String   @unique
  email       String   @unique
  name        String?
  bio         String?
  location    String?
  skills      String[]
  linkedinUrl String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  ideas       Idea[]
  interests   Interest[]
  connections Connection[] @relation("UserConnections")
  connectedBy Connection[] @relation("ConnectedUsers")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Idea {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  stage       String
  equity      String?
  skills      String[]
  location    String?
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  interests   Interest[]
}

model Interest {
  id        String   @id @default(cuid())
  userId    String
  ideaId    String
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  
  @@unique([userId, ideaId])
}

model Connection {
  id               String   @id @default(cuid())
  userId           String
  connectedUserId  String
  status           String   @default("pending") // pending, accepted, rejected
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user        User @relation("UserConnections", fields: [userId], references: [id], onDelete: Cascade)
  connectedUser User @relation("ConnectedUsers", fields: [connectedUserId], references: [id], onDelete: Cascade)
  
  @@unique([userId, connectedUserId])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}
